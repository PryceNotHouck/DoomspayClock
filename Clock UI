#include <windows.h>
#include <cmath>
#include <string>
#include <sstream>
//updated with digital clock functionality and corrected math for time calculation
// global variables
HINSTANCE hInst;
LPCSTR szTitle = "Circle Window"; // window title
LPCSTR szWindowClass = "CIRCLEWINDOW"; // window class name

// forward declarations of functions included in this code module:
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

// global variables for clock hands and time input
static std::string timeInput = "12:00";
static int hour = 0, minute = 0;
static HWND hTextRemaining;

// control IDs
#define ID_INPUT 101
#define ID_SUBMIT 102
#define ID_TEXT 103

// entry point here
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    // register window class
    WNDCLASSEX wcex;
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(nullptr, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = nullptr;
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(nullptr, IDI_APPLICATION);

    if (!RegisterClassEx(&wcex))
    {
        MessageBox(nullptr, "Call to RegisterClassEx failed!", "Win32 Guided Tour", MB_OK);
        return 1;
    }

    // create the window
    HWND hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 500, 500, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        MessageBox(nullptr, "Call to CreateWindow failed!", "Win32 Guided Tour", MB_OK);
        return 1;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    //main message loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

// function to parse time input
void ParseTimeInput(const std::string& input)
{
    std::stringstream ss(input);
    char colon;
    ss >> hour >> colon >> minute;
}

// function to draw the clock hands
void DrawClockHands(HDC hdc, int centerX, int centerY, int radius)
{
    // calculate hand positions
    double hourAngle = (hour % 12 + minute / 60.0) * 2 * 3.141592653589793 / 12;
    double minuteAngle = minute * 2 * 3.141592653589793 / 60;

    int hourHandLength = radius * 0.5;
    int minuteHandLength = radius * 0.8;

    // hour hand stat
    int hourHandX = centerX + (int)(hourHandLength * sin(hourAngle));
    int hourHandY = centerY - (int)(hourHandLength * cos(hourAngle));

    // minute hand stat
    int minuteHandX = centerX + (int)(minuteHandLength * sin(minuteAngle));
    int minuteHandY = centerY - (int)(minuteHandLength * cos(minuteAngle));

    // draw hour hand
    HPEN hPenHour = CreatePen(PS_SOLID, 4, RGB(255, 0, 0)); // Red color for hour hand
    HPEN hOldPenHour = (HPEN)SelectObject(hdc, hPenHour);
    MoveToEx(hdc, centerX, centerY, nullptr);
    LineTo(hdc, hourHandX, hourHandY);
    SelectObject(hdc, hOldPenHour);
    DeleteObject(hPenHour);

    // draw minute hand
    HPEN hPenMinute = CreatePen(PS_SOLID, 2, RGB(0, 0, 255)); // Blue color for minute hand
    HPEN hOldPenMinute = (HPEN)SelectObject(hdc, hPenMinute);
    MoveToEx(hdc, centerX, centerY, nullptr);
    LineTo(hdc, minuteHandX, minuteHandY);
    SelectObject(hdc, hOldPenMinute);
    DeleteObject(hPenMinute);
}

// function to update the text box with remaining minutes until midnight
void UpdateRemainingMinutes(HWND hWnd)
{
    int totalMinutes = (12 * 60) - (hour*60 + minute);

    std::stringstream ss;
    ss << "There are currently " << totalMinutes << " minutes until midnight";
    SetWindowText(hTextRemaining, ss.str().c_str());
}

void DrawDigitalClock(HDC hdc, int centerX, int centerY, int radius)
{
    // this will set up font and color for digital clock
    HFONT hFont = CreateFont(
            24,                // height of font
            0,                 // average character width
            0,                 // escapement angle
            0,                 // base-line orientation angle
            FW_BOLD,           // font weight
            FALSE,             // italic no
            FALSE,             // underline no
            FALSE,             // strikeout no
            ANSI_CHARSET,      // character set identifier
            OUT_TT_PRECIS,     // output precision
            CLIP_DEFAULT_PRECIS, // clipping precision
            ANTIALIASED_QUALITY, // output quality
            DEFAULT_PITCH,     // pitch and family
            "Arial");          // font

    HFONT hOldFont = (HFONT)SelectObject(hdc, hFont);
    COLORREF oldTextColor = SetTextColor(hdc, RGB(255, 0, 0));

    //draws dig clock
    std::stringstream ss;
    ss << (hour < 10 ? "0" : "") << hour << ":" << (minute < 10 ? "0" : "") << minute;
    std::string timeStr = ss.str();

    RECT timeRect;
    SetRect(&timeRect, centerX - 50, centerY + radius + 10, centerX + 50, centerY + radius + 40);

    DrawText(hdc, timeStr.c_str(), -1, &timeRect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);

    // Cleanup
    SetTextColor(hdc, oldTextColor);
    SelectObject(hdc, hOldFont);
    DeleteObject(hFont);
}

// window procedure function
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HBRUSH hBrushBlack;
    static HBRUSH hBrushWhite;
    static HWND hEditInput;
    static HWND hButtonSubmit;

    switch (message)
    {
        case WM_CREATE:
            // create brushes for black and white
            hBrushBlack = CreateSolidBrush(RGB(0, 0, 0));
            hBrushWhite = CreateSolidBrush(RGB(255, 255, 255));

            // create an edit control for time input, we can go back and allow for this variable to be updated with the appropriately calculated
            // time from the formula
            hEditInput = CreateWindow("EDIT", "", WS_CHILD | WS_VISIBLE | WS_BORDER, 50, 50, 100, 25, hWnd, (HMENU)ID_INPUT, GetModuleHandle(nullptr), nullptr);

            // create a button to submit the time
            hButtonSubmit = CreateWindow("BUTTON", "Set Time", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, 160, 50, 75, 25, hWnd, (HMENU)ID_SUBMIT, GetModuleHandle(nullptr), nullptr);

            // create a static text control for displaying remaining minutes
            hTextRemaining = CreateWindow("STATIC", "", WS_CHILD | WS_VISIBLE, 50, 90, 250, 25, hWnd, (HMENU)ID_TEXT, GetModuleHandle(nullptr), nullptr);
            UpdateRemainingMinutes(hWnd); // Initialize text
            break;

        case WM_COMMAND:
            if (LOWORD(wParam) == ID_SUBMIT)
            {
                char buffer[10];
                GetWindowText(hEditInput, buffer, sizeof(buffer));
                timeInput = buffer;
                ParseTimeInput(timeInput);
                InvalidateRect(hWnd, nullptr, TRUE); // Request repaint
                UpdateRemainingMinutes(hWnd); // Update remaining minutes text
            }
            break;


        case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);

            // set the background to white
            FillRect(hdc, &ps.rcPaint, hBrushWhite);

            // draw a white circle with a black border
            RECT rect;
            GetClientRect(hWnd, &rect);
            int centerX = (rect.right - rect.left) / 2;
            int centerY = (rect.bottom - rect.top) / 2;
            int radius = 100; // Radius of the circle

            // create a white brush for the fill and a black pen for the border
            HBRUSH hOldBrush = (HBRUSH)SelectObject(hdc, hBrushWhite);
            HPEN hPenBlack = CreatePen(PS_SOLID, 2, RGB(0, 0, 0));
            HPEN hOldPen = (HPEN)SelectObject(hdc, hPenBlack);

            // draw the filled white circle
            Ellipse(hdc, centerX - radius, centerY - radius, centerX + radius, centerY + radius);

            // draw border of the circle
            SelectObject(hdc, hPenBlack);
            SelectObject(hdc, hOldBrush);
            SelectObject(hdc, hOldPen);

            // cleanup
            DeleteObject(hPenBlack);

            // draw 60 dashes around circle for minutes
            int dashLength = 10; // length of the normal dashes
            int longDashLength = 15; // length of the thicker 5 dashes
            int thicknessNormal = 1; // thickness of normal dashes
            int thicknessThick = 3; // thickness of thicker dashes

            for (int i = 0; i < 60; ++i)
            {
                double angle = i * 2 * 3.141592653589793 / 60; // Angle for each dash
                int startX = centerX + (int)((radius - 10) * cos(angle)); // Start point of the dash
                int startY = centerY - (int)((radius - 10) * sin(angle)); // Start point of the dash
                int endX = centerX + (int)((radius - 10 - (i % 5 == 0 ? longDashLength : dashLength)) * cos(angle)); // End point of the dash
                int endY = centerY - (int)((radius - 10 - (i % 5 == 0 ? longDashLength : dashLength)) * sin(angle)); // End point of the dash

                // choose the pen based on dash index
                HPEN hPenDash = CreatePen(PS_SOLID, (i % 5 == 0 ? thicknessThick : thicknessNormal), RGB(0, 0, 0));
                HPEN hOldPenDash = (HPEN)SelectObject(hdc, hPenDash);

                // draw dash
                MoveToEx(hdc, startX, startY, nullptr);
                LineTo(hdc, endX, endY);

                SelectObject(hdc, hOldPenDash);
                DeleteObject(hPenDash);
            }

            // draw clock hands
            DrawClockHands(hdc, centerX, centerY, radius);

            // draw digital clock display UPDATE
            DrawDigitalClock(hdc, centerX, centerY, radius);

            EndPaint(hWnd, &ps);
        }
            break;





        case WM_DESTROY:
            // "clean brushes" / delete the brush objects after use for cleaner code/ to avoid any potential issues
            DeleteObject(hBrushBlack);
            DeleteObject(hBrushWhite);
            PostQuitMessage(0);
            break;

        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}
